#include <unordered_map>
#include "cache.h"

/**
 * SA_CHUNK_SIZE: the fixed length for temporal stream stored for each pc
 * SA_SIZE 1024, must be some multiple of SA_CHUNK_SIZE
 * TU_COUNT: number of PCs tracked
 * PREFETCH_DEGREE: number of addrs following the hit addr that are prefetched
 */
#define SA_CHUNK_SIZE 256
#define SA_SIZE 4096
#define TU_COUNT 16
#define PREFETCH_DEGREE 3

// map physical addr to index in sa
std::unordered_map<uint64_t, int> ps_amc;
uint64_t sa_alloc_counter;

class training_unit {
  public:
    // the IP we're tracking
    uint64_t ip;

    // the last address accessed by this IP
    uint64_t last_addr;

    // use LRU to evict old IP trackers
    uint32_t lru;

    training_unit () {
        ip = 0;
        last_addr = 0;
        lru = 0;
    };
};

class sa_entry {
  public:
    bool valid;
    uint64_t addr;
    uint32_t counter;

    sa_entry () {
        valid = false;
        addr = 0;
        counter = 0;
    };
};

std::vector<sa_entry> sa(SA_SIZE); // store the physical addr
// track TU_COUNT number of PCs
training_unit tu[TU_COUNT];

void CACHE::l2c_prefetcher_initialize() 
{
    cout << "CPU " << cpu << " L2C ISB prefetcher" << endl;
    sa_alloc_counter = 0;
    for (int i=0; i<TU_COUNT; i++)
        tu[i].lru = i;
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    // check for a tracker hit
    int index = -1;
    for (index=0; index<TU_COUNT; index++) {
        if (tu[index].ip == ip)
            break;
    }

    // this is a new IP that doesn't have a tracker yet, so allocate one
    if (index == TU_COUNT) {

        for (index=0; index<TU_COUNT; index++) {
            if (tu[index].lru == (TU_COUNT-1))
                break;
        }

        tu[index].ip = ip;
        tu[index].last_addr = addr;


        for (int i=0; i<TU_COUNT; i++) {
            if (tu[i].lru < tu[index].lru)
                tu[i].lru++;
        }
        tu[index].lru = 0;

        return metadata_in;
    } else if (tu[index].last_addr != addr) { // if not the same addr in a row, add pair to sa space
        if (ps_amc.find(tu[index].last_addr) == ps_amc.end()) {
            sa[sa_alloc_counter].valid = true;
            sa[sa_alloc_counter].addr = tu[index].last_addr;
            sa[sa_alloc_counter].counter = 0;
            ps_amc.insert(make_pair(addr, sa_alloc_counter));
            sa[sa_alloc_counter + 1].valid = true;
            sa[sa_alloc_counter + 1].addr = addr;
            sa[sa_alloc_counter + 1].counter = 0;
            ps_amc.insert(make_pair(addr, sa_alloc_counter + 1));
            sa_alloc_counter += SA_CHUNK_SIZE;
        } else {
            int sa_index = ps_amc.at(tu[index].last_addr);
            // question: what to do after a chunk is full;
            if (sa_index % SA_CHUNK_SIZE != SA_CHUNK_SIZE - 1) {
                if (sa[sa_index + 1].valid) {
                    if (sa[sa_index + 1].counter > 0) {
                        sa[sa_index + 1].counter--;
                    } else { // replace with the new address
                        sa[sa_index + 1].addr = addr;
                    }
                } else {
                    sa[sa_index + 1].valid = true;
                    sa[sa_index + 1].addr = addr;
                    sa[sa_index + 1].counter = 0;
                    ps_amc.insert(make_pair(addr, sa_index + 1));
                }
            } else { // allocate new chunk
            }
        }
    }

    // sanity check
    // at this point we should know a matching tracker index
    if (index == -1)
        assert(0);

    // only do any prefetching if there's a hit in sa space
    if (ps_amc.find(addr) != ps_amc.end()) {
        int sa_index = ps_amc.at(addr);
        // do some prefetching
        for (int i=0; i<PREFETCH_DEGREE; i++) {
            int chunk_offset = sa_index % SA_CHUNK_SIZE;
            if (chunk_offset + i + 1 < SA_CHUNK_SIZE) {
                uint64_t pf_address = (sa[sa_index + 1 + i].addr >> LOG2_BLOCK_SIZE) << LOG2_BLOCK_SIZE;

                // // only issue a prefetch if the prefetch address is in the same 4 KB page 
                // // as the current demand access address
                // if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                //     break;

                // check the MSHR occupancy to decide if we're going to prefetch to the L2 or LLC
                if (MSHR.occupancy < (MSHR.SIZE>>1)) prefetch_line(ip, addr, pf_address, FILL_L2, 0);
                else prefetch_line(ip, addr, pf_address, FILL_LLC, 0);
            }
        }
    }
    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L2C ISB final stats" << endl;
}
